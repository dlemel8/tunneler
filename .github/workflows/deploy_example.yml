name: Deploy an example server using Terraform and Ansible

on:
  workflow_dispatch:
    inputs:
      exampleName:
        description: 'Example Name'
        required: true
        default: 'speed_test'

env:
  TF_VAR_LINODE_API_TOKEN: ${{ secrets.LINODE_API_TOKEN }}
  TF_VAR_LINODE_PUBLIC_SSH_KEY: ${{ secrets.LINODE_PUBLIC_SSH_KEY }}
  TF_VAR_LINODE_ROOT_PASSWORD: ${{ secrets.LINODE_ROOT_PASSWORD }}
  TF_VAR_SELECTED_EXAMPLE: ${{ github.event.inputs.exampleName }}
  TF_VAR_REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  TF_VAR_CA_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
  TF_VAR_CA_CERTIFICATE: ${{ secrets.CA_CERTIFICATE }}

jobs:
  plan-server-infra:
    runs-on: ubuntu-latest
    outputs:
      plan-exitcode: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load last Ansible inventory
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: deploy_example.yml
          name: ansible_inventory
          path: examples
        continue-on-error: true

      - name: Load last example directory
        id: load_example
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: deploy_example.yml
          name: ${{ github.event.inputs.exampleName }}
          path: examples
        continue-on-error: true

      - name: Decrypt and untar example directory
        run: |
          openssl enc -d -aes-256-cbc -pbkdf2 -pass env:PASSWORD -in ${{ github.event.inputs.exampleName }}.tar.gz.enc -out exaple.tar.gz
          tar -zxf example.tar.gz ${{ github.event.inputs.exampleName }}/
        working-directory: examples
        shell: bash
        env:
          PASSWORD: ${{secrets.ARTIFACTS_PASSWORD}}
        if: steps.load_example.outcome == 'success'

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.4
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform plan
        id: plan
        run: |
          cat ansible_inventory || true
          terraform init
          terraform plan -detailed-exitcode -out=/tmp/tfplan
        working-directory: examples
        continue-on-error: true

      - name: Verify Terraform plan
        if: ${{ steps.plan.outputs.exitcode == 1 }}
        run: exit ${{ steps.plan.outputs.exitcode }}

      - name: Cache plan
        uses: actions/cache@v2
        if: ${{ steps.plan.outputs.exitcode == 2 }}
        with:
          path: /tmp/tfplan
          key: tfplan-${{ github.run_id }}

  apply-server-infra:
    runs-on: ubuntu-latest
    environment: Example
    needs: [ plan-server-infra ]
    if: ${{ needs.plan-server-infra.outputs.plan-exitcode == 2 }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get plan from cache
        uses: actions/cache@v2
        with:
          path: /tmp/tfplan
          key: tfplan-${{ github.run_id }}

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.4
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform apply
        run: |
          terraform init
          terraform show /tmp/tfplan
          terraform apply /tmp/tfplan
        working-directory: examples

      - name: Save Ansible inventory
        uses: actions/upload-artifact@v2
        with:
          name: ansible_inventory
          path: examples/ansible_inventory

      - name: Tar and encrypt example directory
        run: |
          tar -zcf example.tar.gz ${{ github.event.inputs.exampleName }}/
          openssl enc -aes-256-cbc -pbkdf2 -pass env:PASSWORD -in example.tar.gz -out ${{ github.event.inputs.exampleName }}.tar.gz.enc
        working-directory: examples
        shell: bash
        env:
          PASSWORD: ${{secrets.ARTIFACTS_PASSWORD}}

      - name: Save example directory
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.inputs.exampleName }}
          path: examples/${{ github.event.inputs.exampleName }}.tar.gz.enc

  configure-server:
    runs-on: ubuntu-latest
    needs: [ apply-server-infra ]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load last Ansible inventory
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: deploy_example.yml
          name: ansible_inventory
          path: examples

      - name: Load last example directory
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: deploy_example.yml
          name: ${{ github.event.inputs.exampleName }}
          path: examples

      - name: Decrypt and untar example directory
        run: |
          openssl enc -d -aes-256-cbc -pbkdf2 -pass env:PASSWORD -in ${{ github.event.inputs.exampleName }}.tar.gz.enc -out exaple.tar.gz
          tar -zxf example.tar.gz ${{ github.event.inputs.exampleName }}/
        working-directory: examples
        shell: bash
        env:
          PASSWORD: ${{secrets.ARTIFACTS_PASSWORD}}

      - name: Load SSH key
        run: 'echo "$SSH_KEY" > /tmp/id_rsa && chmod 600 /tmp/id_rsa'
        shell: bash
        env:
          SSH_KEY: ${{secrets.SSH_KEY}}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Get Python dependencies from cache
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('examples/requirements.txt') }}

      - name: Install Ansible dependencies
        run: python3.9 -m pip install -r requirements.txt
        working-directory: examples

      - name: Install Ansible playbook dependencies
        run: ansible-galaxy install -r ansible_requirements.yml
        working-directory: examples

      - name: Run Ansible playbook
        run: |
          cat ansible_inventory || true
          ansible-playbook -i ansible_inventory --key-file /tmp/id_rsa ansible_playbook.yml --extra-vars "example_name=${{ github.event.inputs.exampleName }}"
        working-directory: examples

